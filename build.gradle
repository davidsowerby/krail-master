/*
 * Copyright (c) 2015. David Sowerby
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'commons-io:commons-io:2.4'
        classpath 'uk.q3c:q3c-gradle:0.7.0'
        classpath 'com.bmuschko:gradle-docker-plugin:2.0.2'
    }
}


description = 'Master build project for Krail and Krail libraries'


allprojects {

    group = 'uk.q3c.krail'

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'project-report'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'q3c-release'
    apply plugin: 'com.bmuschko.docker-remote-api'

    sourceCompatibility = '1.8'
    ext.assertjVersion = '2.0.0'
    ext.guiceVersion = '4.0'
    ext.vaadinVersion = '7.4.8'
    ext.slf4jVersion = '1.7.6'
    ext.guavaVersion = '18.0'
    ext.vaadinTestbenchVersion = '4.0.2'
    ext.commonsLangVersion = '3.3.2'
    ext.groovyVersion = '2.4.1'
    ext.gsonVersion = '2.3.1'

    ext.versionDescription = 'No version description provided'
    ext.bintrayDryRun = true
    ext.releaseDate = new Date()
    ext.orientVersion = '2.0.6'

//    bintrayUpload.enabled = false

    //lookup version from the file produced by the release process
    version = versionFromFile(project.projectDir)

    if (project.name.equals('krail-testApp') || project.name.equals('krail-demo') || project.name.equals('cpas')) {
        ext.webapp = true
    } else {
        ext.webapp = false
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'http://maven.vaadin.com/vaadin-addons'
        }
    }

    bintray {
        user = 'dsowerby'
        key = bintrayKey

        publications = ['mavenStuff'] //When uploading Maven-based publication files
        dryRun = true  //project.ext.bintrayDryRun //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
            repo = 'maven'
//        userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
            name = project.name
            desc = project.description
            websiteUrl = 'https://github.com/davidsowerby/' + project.name
            issueTrackerUrl = websiteUrl + '/issues'
            vcsUrl = websiteUrl + '.git'
            licenses = ['Apache-2.0']
            labels = ['vaadin', 'guice']
            publicDownloadNumbers = true
            //Optional version descriptor
            version {
                name = project.version
                desc = project.ext.versionDescription
                released = project.ext.releaseDate
                //'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
                mavenCentralSync {
                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                }
            }
        }
    }



    publishing {
        publications {
            mavenStuff(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

    //webapp stuff

    if (webapp) {
        apply from: 'http://plugins.jasoft.fi/vaadin-groovy.plugin?version=0.9.7'
        apply plugin: 'war'

        ext.userHome = System.getProperty("user.home")
        ext.dockerContextDir = file(userHome + "/temp/docker")

        ext.warName = (project.name.toLowerCase() + '.war')
        ext.tomcatVersion = '8'

        vaadin.plugin.logToConsole = true

        war {
            exclude 'WEB-INF/lib/*'
            archiveName = warName

        }


        task clearDockerContext(type: Delete) {
            doFirst {
                println 'clear the docker build dir'
            }
            delete dockerContextDir
        }

        task warToContext(type: Copy) {
            dependsOn clearDockerContext
            doFirst {
                println "copy war to docker build dir"
            }
            from war
            into dockerContextDir

        }

        task dockerFileToContext(type: Copy) {
            dependsOn clearDockerContext
            doFirst {
                println "copy and rename Dockerfile"
            }
            from project.getProjectDir()
            into dockerContextDir
            include("Dockerfile" + tomcatVersion)
            rename("Dockerfile" + tomcatVersion, "Dockerfile")

        }

//        task buildImage(type: DockerBuildImage) {
//            dependsOn warToContext
//            dependsOn dockerFileToContext
//            inputDir = dockerContextDir
//            tag = 'tomcat'+tomcatVersion
//        }

//builds and starts the container
        task startContainer(type: Exec) {
            dependsOn warToContext
            dependsOn dockerFileToContext
            if (Os.isFamily(Os.FAMILY_UNIX)) {
                commandLine 'startContainer' + tomcatVersion
            } else {

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', 'startContainer' + tomcatVersion

                }
            }

        }

        task stopContainer(type: Exec) {


            if (Os.isFamily(Os.FAMILY_UNIX)) {
                commandLine 'stopContainer'
            } else {

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', 'stopContainer'

                }
            }

        }

//        task createContainer(type: DockerCreateContainer) {
//            dependsOn buildImage
//            targetImageId { buildImage.getImageId() }
//        }
//
//        task startContainer(type: DockerStartContainer) {
//            dependsOn createContainer
//            targetContainerId { createContainer.getContainerId() }
//        }

//        task stopContainer(type: DockerStopContainer) {
//            targetContainerId { createContainer.getContainerId() }
//        }

        test.dependsOn(startContainer)
        test.finalizedBy(stopContainer)


        vaadin {
            version vaadinVersion
            manageWidgetset true
            serverPort 8001
        }

        task stopTomcat(type: Exec) {


            if (Os.isFamily(Os.FAMILY_UNIX)) {
                commandLine 'stopTomcat7'
            } else {

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', 'stopTomcat7'

                }
            }

        }

        task startTomcat(type: Exec) {

            if (Os.isFamily(Os.FAMILY_UNIX)) {
                commandLine 'startTomcat7'
            } else {

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', 'startTomcat7'

                }
            }

        }






        task waitForTomcat(dependsOn: startTomcat) {
            doFirst {
                println "giving Tomcat time to start"
                sleep(5 * 1000)
                println "sleep over"
            }
        }







        waitForTomcat.dependsOn(startTomcat)
        waitForTomcat.mustRunAfter(startTomcat)



        stopTomcat.dependsOn(war)
        stopTomcat.mustRunAfter(war)



        dependencies {

            testCompile project(':krail-bench')
            providedCompile('org.ow2.asm:asm-all:5.0.3') //may not be necessary it was an attempt to solve a widgetset compile issue
        }

    } else {


    }





    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    javadoc {
        failOnError = false
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()

            // force certain versions of dependencies (including transitive)
            //  *append new forced modules:

            force 'cglib:cglib-nodep:2.2.2'
            force 'com.google.guava:guava:' + guavaVersion
            force 'com.mycila:mycila-log:2.12'
            force 'org.apache.commons:commons-lang3:' + commonsLangVersion
            force 'org.javassist:javassist:3.18.1-GA'
//            force 'org.seleniumhq.selenium:selenium-java:2.43.1'
//            force 'org.seleniumhq.selenium:selenium-remote-driver:2.43.1'
            force 'org.slf4j:slf4j-api:' + slf4jVersion
//            force 'com.vaadin:vaadin-testbench-core:' + vaadinTestbenchVersion
            force 'commons-logging:commons-logging:1.1.3'
            force 'commons-codec:commons-codec:1.9'
            force 'org.apache.httpcomponents:httpclient:4.3.4'
            force 'xml-apis:xml-apis:1.4.01'
            force 'org.objenesis:objenesis:1.2'
            force 'com.vaadin:vaadin-server:' + vaadinVersion // caused by an add-on
//            force 'org.json:json:20141113'
            force 'com.jcabi:jcabi-aspects:0.20.1'
            force 'com.jcabi:jcabi-log:0.15.1'
            force 'commons-lang:commons-lang:2.4'
            force 'org.ow2.asm:asm-all:5.0.3'
            force 'org.ow2.asm:asm:5.0.3'
            force 'org.ow2.asm:asm-commons:5.0.3'
            force 'org.ow2.asm:asm-tree:5.0.3'
            force 'org.apache.httpcomponents:httpcore:4.3.2'
            force 'xerces:xercesImpl:2.11.0'
            force 'org.codehaus.groovy:groovy-all:' + groovyVersion
            force 'org.assertj:assertj-core:' + assertjVersion
//            force 'com.fasterxml.jackson.core:jackson-core:2.1.2'
            force 'com.google.code.gson:gson:' + gsonVersion
            force 'com.google.inject:guice:' + guiceVersion
            force 'com.google.inject.extensions:guice-multibindings:' + guiceVersion
            force 'commons-configuration:commons-configuration:1.10'
            force 'com.tinkerpop.blueprints:blueprints-core:2.6.0'
            force 'com.orientechnologies:orientdb-core:' + orientVersion
            force 'com.orientechnologies:orientdb-object:' + orientVersion
            force 'com.orientechnologies:orientdb-client:' + orientVersion
            force 'com.orientechnologies:orientdb-enterprise:' + orientVersion
            force 'com.orientechnologies:orient-commons:1.7.10'
            force 'net.java.dev.jna:jna:4.0.0'
            force 'org.mockito:mockito-all:1.10.19'
            // mockito-all seems to download an older version of core, which causes problems
            force 'org.mockito:mockito-core:1.10.19'
            force 'org.hamcrest:hamcrest-all:1.3'

            // GWT requires an old version of the validation API.  Changing to a newer version breaks widgetset compile but throws no errors
            force 'javax.validation:validation-api:1.0.0.GA'


        }
    }


    dependencies {

        //code analysis
        compile 'com.google.code.findbugs:annotations:3.0.0'

        //Dependency Injection
        compile 'com.google.inject:guice:' + guiceVersion

        if (!project.name.equals('q3-util') && !project.name.equals('krail')) {
            compile project(':krail')
        }

        //Logging
        compile 'org.slf4j:slf4j-api:' + slf4jVersion
        compile 'ch.qos.logback:logback-classic:1.1.2'
        compile 'ch.qos.logback:logback-core:1.1.2'
        compile 'org.codehaus.groovy:groovy-all:' + groovyVersion

        //Utility
        compile 'com.google.guava:guava:' + guavaVersion

        //Testing
        testCompile 'com.mycila:mycila-guice:2.10.ga'
        testCompile 'com.mycila.testing.plugins:mycila-testing-guice:2.8'
        testCompile 'com.mycila.testing.plugins:mycila-testing-mockito:2.8'
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile 'junit:junit:4.11'
        testCompile 'org.assertj:assertj-core:' + assertjVersion
        testCompile 'org.assertj:assertj-guava:1.3.1'

    }

}

dependencies {
    compile project(':krail-testUtil')
    compile project(':q3c-testUtil')
}

task verifyRelease(type: uk.q3c.gradle.VerificationTask) {

}

task prepareRelease(type: uk.q3c.gradle.PrepareReleaseTask) {

}

task release(type: uk.q3c.gradle.ReleaseTask) {

}

def versionFromFile(File projectRoot) {
    def Properties props = new Properties()
    def propFile = new File(projectRoot, 'version.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
    }
    String key = "CURRENT_VERSION"
    println(projectRoot.getName() + ": version is " + props[key])
    props[key]
}

