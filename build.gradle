/*
 * Copyright (c) 2015. David Sowerby
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'commons-io:commons-io:2.4'
        classpath 'uk.q3c:q3c-gradle:0.6.0'
    }
}


description = 'Master build project for Krail and Krail libraries'


allprojects {

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'project-report'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'q3c-release'

    sourceCompatibility = '1.8'
    ext.assertjVersion = '1.7.1'
//    ext.guiceVersion = '4.0-beta5'
    ext.guiceVersion = '3.0'
    ext.vaadinVersion = '7.4.0'
    ext.slf4jVersion = '1.7.0'
    ext.guavaVersion = '18.0'
    ext.vaadinTestbenchVersion = '4.0.1'
    ext.commonsLangVersion = '3.3.2'

    ext.versionDescription = 'No version description provided'
    ext.bintrayDryRun = true
    ext.releaseDate = new Date()

//    bintrayUpload.enabled = false

    //lookup version from the file produced by the release process
    version = versionFromFile(project.projectDir)

    if (project.name.equals('krail-testApp') || project.name.equals('krail-demo')) {
        ext.webapp = true
    } else {
        ext.webapp = false
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'http://maven.vaadin.com/vaadin-addons'
        }
    }

    bintray {
        user = 'dsowerby'
        key = bintrayKey

        publications = ['mavenStuff'] //When uploading Maven-based publication files
        dryRun = false  //project.ext.bintrayDryRun //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
            repo = 'maven'
//        userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
            name = project.name
            desc = project.description
            websiteUrl = 'https://github.com/davidsowerby/' + project.name
            issueTrackerUrl = websiteUrl + '/issues'
            vcsUrl = websiteUrl + '.git'
            licenses = ['Apache-2.0']
            labels = ['vaadin', 'guice']
            publicDownloadNumbers = true
            //Optional version descriptor
            version {
                name = project.version
                desc = project.ext.versionDescription
                released = project.ext.releaseDate
                //'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
                mavenCentralSync {
                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                }
            }
        }
    }




    publishing {
        publications {
            mavenStuff(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

//Test preparation, but shortened to make it easier on the command line
    task testPrep << {

    }


    testPrep.dependsOn(clean)
    testPrep.mustRunAfter(clean)
    test.mustRunAfter(testPrep)

    //webapp stuff

    if (webapp) {
        apply from: 'http://plugins.jasoft.fi/vaadin-groovy.plugin?version=0.9.6'
        apply plugin: 'war'

        ext.userHome = System.getProperty("user.home")
        ext.tomcatHome = userHome + "/tomcat7_8080"

        ext.warName = (project.name.toLowerCase() + '.war')


        war {
            exclude 'WEB-INF/lib/*'
            archiveName = warName
            destinationDir file(userHome + "/temp")
        }


        vaadin {
            version vaadinVersion
            manageWidgetset true
            serverPort 8001
        }

        task stopTomcat(type: Exec) {


            if (Os.isFamily(Os.FAMILY_UNIX)) {
                commandLine 'stopTomcat7'
            } else {

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', 'stopTomcat7'

                }
            }

        }

        task startTomcat(type: Exec) {

            if (Os.isFamily(Os.FAMILY_UNIX)) {
                commandLine 'startTomcat7'
            } else {

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', 'startTomcat7'

                }
            }

        }


        task deployToTomcat(type: Copy) {
            it.dependsOn("war")
            from war
            into "${tomcatHome}/webapps"
        }



        task waitForTomcat(dependsOn: startTomcat) {
            doFirst {
                println "giving Tomcat time to start"
                sleep(5 * 1000)
                println "sleep over"
            }
        }




        task cleanTomcat(type: Delete, dependsOn: stopTomcat) {
            delete tomcatHome + '/webapps/' + warName, tomcatHome + '/webapps/' + project.name
        }

        testPrep.doFirst {

        }

        testPrep.dependsOn(waitForTomcat)
        testPrep.mustRunAfter(waitForTomcat)
        waitForTomcat.dependsOn(startTomcat)
        waitForTomcat.mustRunAfter(startTomcat)

        startTomcat.dependsOn(deployToTomcat)
        startTomcat.mustRunAfter(deployToTomcat)

        deployToTomcat.dependsOn(stopTomcat)
        deployToTomcat.mustRunAfter(stopTomcat)

        stopTomcat.dependsOn(war)
        stopTomcat.mustRunAfter(war)



        dependencies {

            testCompile project(':krail-bench')
            testCompile 'com.vaadin:vaadin-testbench:' + vaadinTestbenchVersion
        }

    } else {

        testPrep.doFirst {
            println('Test preparation for non-webapp')
        }


    }


    group = 'uk.q3c.krail'


    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    javadoc {
        failOnError = false
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()

            // force certain versions of dependencies (including transitive)
            //  *append new forced modules:
//            force 'org.slf4j:slf4j-api:1.6.6', 'org.slf4j:sl4j-api:1.7.6'
            //  *replace existing forced modules with new ones:
//            forcedModules = ['asm:asm-all:3.3.1']

            // add a dependency resolve rule
            eachDependency { DependencyResolveDetails details ->
                //specifying a fixed version for all libraries with 'org.gradle' group
                if (details.requested.group == 'org.slf4j') {
                    if (details.requested.name == 'slf4j-api') {
                        details.useVersion slf4jVersion
                    }
                }
                if (details.requested.group == 'com.google.guava') {
                    if (details.requested.name == 'guava') {
                        details.useVersion guavaVersion
                    }
                }
                if (details.requested.group == 'com.mycila') {
                    if (details.requested.name == 'mycila-log') {
                        details.useVersion '2.12'
                    }
                }
                if (details.requested.group == 'org.javassist') {
                    if (details.requested.name == 'javassist') {
                        details.useVersion '3.18.1-GA'
                    }
                }
                if (details.requested.group == 'com.vaadin') {
                    if (details.requested.name == 'vaadin-testbench-core') {
                        details.useVersion vaadinTestbenchVersion
                    }
                }

                if (details.requested.group == 'com.vaadin') {
                    if (details.requested.name == 'vaadin-server') {
                        details.useVersion vaadinVersion
                    }
                }

                if (details.requested.group == 'org.seleniumhq.selenium') {
                    if (details.requested.name == 'selenium-java') {
                        details.useVersion '2.43.1'
                    }
                    if (details.requested.name == 'selenium-remote-driver') {
                        details.useVersion '2.43.1'
                    }
                }

                if (details.requested.group == 'cglib') {
                    if (details.requested.name == 'cglib-nodep') {
                        details.useVersion '2.2.2'
                    }
                }

                if (details.requested.group == 'commons-logging') {
                    if (details.requested.name == 'commons-logging') {
                        details.useVersion '1.1.3'
                    }
                }

                if (details.requested.group == 'commons-codec') {
                    if (details.requested.name == 'commons-codec') {
                        details.useVersion '1.9'
                    }
                }

                if (details.requested.group == 'org.objenesis') {
                    if (details.requested.name == 'objenesis') {
                        details.useVersion '1.2'
                    }
                }

                if (details.requested.group == 'org.apache.commons') {
                    if (details.requested.name == 'commons-lang3') {
                        details.useVersion commonsLangVersion
                    }
                }

                if (details.requested.group == 'org.apache.httpcomponents') {
                    if (details.requested.name == 'httpclient') {
                        details.useVersion '4.3.4'
                    }
                    if (details.requested.name == 'httpcore') {
                        details.useVersion '4.3.2'
                    }
                }

                if (details.requested.group == 'xml-apis') {
                    if (details.requested.name == 'xml-apis') {
                        details.useVersion '1.4.01'
                    }
                }

                if (details.requested.group == 'org.json') {
                    if (details.requested.name == 'json') {
                        details.useVersion '20141113'
                    }
                }

                if (details.requested.group == 'org.ow2.asm') {
                    if (details.requested.name == 'asm') {
                        details.useVersion '5.0.2'
                    }
                    if (details.requested.name == 'asm-commons') {
                        details.useVersion '5.0.2'
                    }
                    if (details.requested.name == 'asm-tree') {
                        details.useVersion '5.0.3'
                    }
                }

                if (details.requested.group == 'xerces') {
                    if (details.requested.name == 'xerces') {
                        details.useVersion '2.11.0'
                    }
                    if (details.requested.name == 'xercesImpl') {
                        details.useVersion '2.11.0'
                    }
                }

                if (details.requested.group == 'org.codehaus.groovy') {
                    if (details.requested.name == 'groovy-all') {
                        details.useVersion '2.4.1'
                    }
                }

//                //changing 'groovy-all' into 'groovy':
//                if (details.requested.name == 'groovy-all') {
//                    details.useTarget group: details.requested.group, name: 'groovy', version: details.requested.version
//                }
            }
//
//            // cache dynamic versions for 10 minutes
//            cacheDynamicVersionsFor 10*60, 'seconds'
//            // don't cache changing modules at all
//            cacheChangingModulesFor 0, 'seconds'
        }
    }


    dependencies {

        //code analysis
        compile 'com.google.code.findbugs:annotations:3.0.0'

        //Dependency Injection
        compile 'com.google.inject:guice:' + guiceVersion

        if (!project.name.equals('q3-util') && !project.name.equals('krail')) {
            compile project(':krail')
        }

        //Logging
        compile 'org.slf4j:slf4j-api:' + slf4jVersion
        compile 'ch.qos.logback:logback-classic:1.1.2'
        compile 'ch.qos.logback:logback-core:1.1.2'
        compile 'org.codehaus.groovy:groovy-all:2.4.1'

        //Utility
        compile 'com.google.guava:guava:' + guavaVersion

        //Testing
        testCompile 'com.mycila:mycila-guice:2.10.ga'
        testCompile 'com.mycila.testing.plugins:mycila-testing-guice:2.8'
        testCompile 'com.mycila.testing.plugins:mycila-testing-mockito:2.8'
        testCompile 'org.mockito:mockito-all:1.9.0'
        testCompile 'junit:junit:4.11'
        testCompile 'org.assertj:assertj-core:' + assertjVersion
        testCompile 'org.assertj:assertj-guava:1.3.1'

    }

}

dependencies {
    compile project(':krail-testUtil')
    compile project(':q3c-testUtil')
}

task verifyRelease(type: uk.q3c.gradle.VerificationTask) {

}

task prepareRelease(type: uk.q3c.gradle.PrepareReleaseTask) {

}

task release(type: uk.q3c.gradle.ReleaseTask) {

}

def versionFromFile(File projectRoot) {
    def Properties props = new Properties()
    def propFile = new File(projectRoot, 'version.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
    }
    String key = "CURRENT_VERSION"
    println(projectRoot.getName() + ": version is " + props[key])
    props[key]
}

